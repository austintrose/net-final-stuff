import os
import whois
from collections import defaultdict
from django.db import connection
from random import random
from threading import Thread
from time import sleep
from django.core.management.base import BaseCommand, CommandError
from domains.models import (AddedZoneDomain, RemovedZoneDomain,
                            Nameserver, AddedMalwareDomain, RemovedMalwareDomain, WhoisQuery)

registrar_counts = defaultdict(int)

tld_checking = "COM"

def do_whois(start_inc, end_ninc):
    # Get this thread's chunk of AMDs from DB.
    amds = AddedMalwareDomain.objects.order_by('pk').filter(pk__gte=start_inc, pk__lte=end_ninc, tld=tld_checking)

    for amd in amds:
        domain_name = amd.name + "." + amd.tld

        try:
            w = whois.whois(domain_name)
        except Exception, e:
            continue

        if not w.registrar:
            continue

        if type(w.creation_date) == type([]):
            cd = w.creation_date[0].date()
        else:
            cd = w.creation_date.date()

        delta = amd.added - cd
        if delta.days >= 0:
            registrar_counts[w.registrar] += 1

class Command(BaseCommand):
    def handle(self, *args, **options):
        threads = []
        width = AddedMalwareDomain.objects.count() / 10
        bounds = [(1+i*width, 1+(i+1)*width) for i in range(10)]
        for start_inc, end_ninc in bounds:
            new_thread = Thread(target=do_whois, args=(start_inc, end_ninc))
            threads.append(new_thread)
            new_thread.daemon = True
            new_thread.start()

        print "joining", len(threads)
	for t in threads:
            t.join()

        print "joined"
        outfile = open('/home/atrose/malware_'+ tld_checking + '_registrars.txt', 'w')
        for k,v in registrar_counts.iteritems():
            print k
            print v
            print
        for k,v in registrar_counts.iteritems():
            outfile.write(str(v).decode('utf-8'))
            outfile.write(u' ')
            outfile.write(k.decode('iso-8859-1'))
            outfile.write(u'\n')
